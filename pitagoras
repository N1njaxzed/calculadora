<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <title>Calculadora de Pitagoras</title>
  <!--Estilos CSS de calculadora principal-->
  <style>
    body {
      font-family: Arial, sans-serif;
      color: white;
    }


    .container {
      margin: 0 auto;
      max-width: 400px;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
      text-align: center;

    }
    
    .form-group {
      margin-bottom: 15px;
      text-align: left;
    }
    
    label {
      display: block;
      margin-bottom: 5px;
      text-align: center;

    }
    
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    
    input[type="number"] {
      width: 100%;
      padding: 5px;
      text-align: center;
    }
    
    .result {
      margin-top: 20px;
      font-weight: bold;
      border-bottom: solid, black, 1px;
    }
    
    .error {
      color: red;
    }
    
    canvas {
      display: block;
      margin: 20px, auto;
    }

    canvas {
        display: block;
        margin: 20px, auto;
    }

    
  </style>







<!--Estilos CSS para la topbar-->

  <style>

    body {
      height: 100vh;
      overflow-y: scroll;
    }

    body::-webkit-scrollbar {
      width: 0.1px;
      background-color: black;
    }

    body::-webkit-scrollbar-thumb {
      background-color: black;
    }

    #triangleCanvas {
      margin: 0 auto;
    }
    
    #disableButton {
      position: fixed;
      top: 10px;
      left: 10px;
    }


    body {
        background-image: url("imagenes/Space\ topbar.png");
        background-repeat: no-repeat;
        background-size: cover;
        background-attachment: fixed;
        
    
    
    }

    #Topbar {
      font-family: monospace;
      margin: 0;
      padding: 0;
    }



    .topbar {
      background-image: url(imagenes/Space\ topbar.png);
      padding: 15px;
      color: #fff;
      background-repeat: no-repeat;
      background-size: 100%;
      transition: box-shadow 0.5s ease;
      transition: linear 0.6s background-color;
      border-bottom: rgba(0, 0, 0, 0.459) solid 3px;
    }

    .topbar:hover {
        box-shadow: 0px 1px 100px rgba(49, 28, 124, 0.9);
        border-bottom: rgba(36, 0, 102, 0.795) solid 3px;
        
    }
    
    .topbar-content {
      display: flex;
      justify-content: space-between;
    }
    
    
    .topbar-links {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
    }

    .topbar-logo {
      font-size: 20px;
      font-weight: bold;
    }

    .topbar-link {
      margin-left: 10px;
    }
    
    .topbar-link a {
      color: #fff;
      text-decoration: none;
    }


  </style>





</head>


<body id="Topbar">

    <div class="topbar">
        <div class="topbar-content">
          <div class="topbar-logo">"Logo"</div>
          <ul class="topbar-links">
            <li class="topbar-link"><a href="#">Inicio</a></li>
            <li class="topbar-link"><a href="#">Acerca de</a></li>
            <li class="topbar-link"><a href="#">Contacto</a></li>
          </ul>
        </div>
      </div>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body>





<!--Calculadora principal-->
<body>
   
  <div class="container">
    <h2>Calculadora de Pitágoras</h2>
    
    <div class="form-group">
      <label for="sideA">Cateto A:</label>
      <input type="number" id="sideA" placeholder="Ingrese el valor del cateto A">
    </div>
    
    <div class="form-group">
      <label for="sideB">Cateto B:</label>
      <input type="number" id="sideB" placeholder="Ingrese el valor del cateto B">
    </div>
    
    <div class="form-group">
      <label for="sideC">Hipotenusa:</label>
      <input type="number" id="sideC" placeholder="Ingrese el valor de la hipotenusa">
    </div>
    
    <button onclick="calculatePitagoras()">Calcular</button>
    
    <div class="result" id="result"></div>
  </div>

  <br>
  <br>
  <br>
  <div style="padding-top: 20px; padding-bottom: 15;"><center><canvas id="triangleCanvas" width="400" height="200"></canvas></center></div>

  <br>
  <br>
  

<!--Estilos JS para la calculadora principal-->
  <script>
    function calculatePitagoras() {
      var sideA = parseFloat(document.getElementById('sideA').value);
      var sideB = parseFloat(document.getElementById('sideB').value);
      var sideC = parseFloat(document.getElementById('sideC').value);
      var result = document.getElementById('result');
      var canvas = document.getElementById('triangleCanvas');
      var context = canvas.getContext('2d');
      
      context.clearRect(0, 0, canvas.width, canvas.height);
      
      if (sideA && sideB && sideC) {
        result.innerText = 'Ingrese solo dos valores (catetos o hipotenusa).';
      } else if (sideA && sideB) {
        sideC = Math.sqrt(Math.pow(sideA, 2) + Math.pow(sideB, 2));
        result.innerText = 'El valor de la hipotenusa es: ' + sideC.toFixed(2);
      } else if (sideA && sideC) {
        sideB = Math.sqrt(Math.pow(sideC, 2) - Math.pow(sideA, 2));
        result.innerText = 'El valor del cateto B es: ' + sideB.toFixed(2);
      } else if (sideB && sideC) {
        sideA = Math.sqrt(Math.pow(sideC, 2) - Math.pow(sideB, 2));
        result.innerText = 'El valor del cateto A es: ' + sideA.toFixed(2);
      } else {
        result.innerText = 'Ingrese al menos dos valores (catetos o hipotenusa).';
      }
      
      if (sideA && sideB && sideC) {
        drawTriangle(sideA, sideB, sideC);
      }
    }
    
    var canvas = document.getElementById('triangleCanvas');
    var context = canvas.getContext('2d');
    var triangleVisible = false;
    var sideA, sideB, sideC;




    function drawTriangle(sideA, sideB, sideC) {

      var canvas = document.getElementById('triangleCanvas');
      var context = canvas.getContext('2d');
      var TrianguleVisible = false;

      var rect = canvas.getBoundingClientRect();
      var rectCenterX = rect.width / 2;
      var rectCenterY = rect.height / 2;
      
      var height = (sideA / sideC) * rect.height;
      var width = (sideB / sideC) * rect.width;

      context.clearRect(0, 0, canvas.width, canvas.height);


      
      

      var baseX = rectCenterX - width / 2;
      var baseY = rectCenterY + height / 2;
      


      
      context.beginPath();
      context.moveTo(baseX, baseY);
      context.lineTo(baseX + width, baseY);
      context.lineTo(baseX, baseY - height);
      context.closePath();
      context.strokeStyle = 'black';
      context.lineWidth = 2;
      context.fillStyle = 'grey';
      context.fill();
      context.stroke();
      
      //rectangulo
      if (sideA && sideB && sideC) {
        context.beginPath();
        context.rect(baseX, baseY - height, width, height);
        context.strokeStyle = 'transparent';
        context.lineWidth = 2;
        context.stroke();
      }



      //Mostrar angulos

      var angleA = Math.acos(sideA / sideC) * (180 / Math.PI);
      var angleB = Math.acos(sideB / sideC) * (180 / Math.PI);
      var angleC = 180 - angleA - angleB;

      // Mostrar ángulos
      context.fillStyle = 'white';
      context.font = '14px Monospace';
      context.textAlign = 'center';


      // Ángulo A
      var angleAX = baseX;
      var angleAY = baseY - height;
      context.fillText(angleA.toFixed(2) + '°', angleAX, angleAY);

      // Ángulo B
      var angleBX = baseX + width;
      var angleBY = baseY;
      context.fillText(angleB.toFixed(2) + '°', angleBX, angleBY +13);

      // Ángulo C
      var angleCX = baseX;
      var angleCY = baseY;
      context.fillText(angleC.toFixed(2) + '°', angleCX, angleCY + 13);
      
      //expandir los limites


      //Catetos

      
      context.fillText('A', baseX - 6, baseY - height / 2);
      context.fillText('B', baseX + width / 2 - 15, baseY + 14);
      context.fillText('C', baseX + width / 2.25, baseY - height / 1.75 + 13);
      context.fillStyle = 'black';
      context.font = '12px Arial';


      


    }   
  </script>
<body>
<html>
